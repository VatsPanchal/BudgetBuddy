{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"ResetPassword\",\n  data() {\n    return {\n      newPassword: \"\",\n      confirmPassword: \"\",\n      loading: false,\n      error: null,\n      passwordError: null,\n      confirmError: null\n    };\n  },\n  methods: {\n    validatePassword() {\n      // Reset errors\n      this.passwordError = null;\n      this.confirmError = null;\n\n      // Validate password length\n      if (this.newPassword.length < 8) {\n        this.passwordError = \"Password must be at least 8 characters long\";\n        return false;\n      }\n\n      // Validate password match\n      if (this.newPassword !== this.confirmPassword) {\n        this.confirmError = \"Passwords do not match\";\n        return false;\n      }\n      return true;\n    },\n    async handleSubmit() {\n      if (!this.validatePassword()) {\n        return;\n      }\n      this.loading = true;\n      this.error = null;\n      try {\n        console.log(\"Sending reset password request\");\n        const response = await axios.post(\"/api/auth/reset-password\", {\n          token: this.$route.query.email,\n          new_password: this.newPassword\n        });\n        console.log(\"Response received:\", response.data);\n        if (response.data.message === \"Password updated successfully\") {\n          // Redirect to login page\n          this.$router.push(\"/login\");\n        }\n      } catch (error) {\n        console.error(\"Error details:\", error.response?.data);\n        if (error.response?.status === 422) {\n          const details = error.response.data.detail;\n          if (Array.isArray(details)) {\n            this.error = details[0].msg;\n          } else {\n            this.error = \"Invalid password format\";\n          }\n        } else if (error.response?.status === 400) {\n          this.error = \"Invalid reset token\";\n        } else {\n          this.error = \"An error occurred. Please try again.\";\n        }\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","newPassword","confirmPassword","loading","error","passwordError","confirmError","methods","validatePassword","length","handleSubmit","console","log","response","post","token","$route","query","email","new_password","message","$router","push","status","details","detail","Array","isArray","msg"],"sources":["C:\\Users\\nikha\\OneDrive\\Documents\\CS122 Final Project\\BudgetBuddy\\frontend\\src\\components\\ResetPassword.vue"],"sourcesContent":["<template>\r\n  <div class=\"reset-password-container\">\r\n    <div class=\"reset-password-card\">\r\n      <h2>Reset Your Password</h2>\r\n      <p class=\"subtitle\">Enter your new password</p>\r\n\r\n      <form @submit.prevent=\"handleSubmit\" class=\"reset-password-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"newPassword\">New Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"newPassword\"\r\n            v-model=\"newPassword\"\r\n            required\r\n            minlength=\"8\"\r\n            placeholder=\"Enter new password\"\r\n            @input=\"validatePassword\"\r\n          />\r\n          <span class=\"error\" v-if=\"passwordError\">{{ passwordError }}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"confirmPassword\">Confirm New Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"confirmPassword\"\r\n            v-model=\"confirmPassword\"\r\n            required\r\n            minlength=\"8\"\r\n            placeholder=\"Confirm new password\"\r\n            @input=\"validatePassword\"\r\n          />\r\n          <span class=\"error\" v-if=\"confirmError\">{{ confirmError }}</span>\r\n        </div>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          class=\"btn-primary\"\r\n          :disabled=\"loading || passwordError || confirmError\"\r\n        >\r\n          {{ loading ? \"Resetting...\" : \"Reset Password\" }}\r\n        </button>\r\n\r\n        <div class=\"error-message\" v-if=\"error\">\r\n          {{ error }}\r\n        </div>\r\n      </form>\r\n\r\n      <div class=\"back-to-login\">\r\n        <router-link to=\"/login\" class=\"btn-link\">\r\n          ‚Üê Back to Login\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"ResetPassword\",\r\n  data() {\r\n    return {\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n      loading: false,\r\n      error: null,\r\n      passwordError: null,\r\n      confirmError: null,\r\n    };\r\n  },\r\n  methods: {\r\n    validatePassword() {\r\n      // Reset errors\r\n      this.passwordError = null;\r\n      this.confirmError = null;\r\n\r\n      // Validate password length\r\n      if (this.newPassword.length < 8) {\r\n        this.passwordError = \"Password must be at least 8 characters long\";\r\n        return false;\r\n      }\r\n\r\n      // Validate password match\r\n      if (this.newPassword !== this.confirmPassword) {\r\n        this.confirmError = \"Passwords do not match\";\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    },\r\n    async handleSubmit() {\r\n      if (!this.validatePassword()) {\r\n        return;\r\n      }\r\n\r\n      this.loading = true;\r\n      this.error = null;\r\n\r\n      try {\r\n        console.log(\"Sending reset password request\");\r\n        const response = await axios.post(\"/api/auth/reset-password\", {\r\n          token: this.$route.query.email,\r\n          new_password: this.newPassword,\r\n        });\r\n        console.log(\"Response received:\", response.data);\r\n\r\n        if (response.data.message === \"Password updated successfully\") {\r\n          // Redirect to login page\r\n          this.$router.push(\"/login\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error details:\", error.response?.data);\r\n        if (error.response?.status === 422) {\r\n          const details = error.response.data.detail;\r\n          if (Array.isArray(details)) {\r\n            this.error = details[0].msg;\r\n          } else {\r\n            this.error = \"Invalid password format\";\r\n          }\r\n        } else if (error.response?.status === 400) {\r\n          this.error = \"Invalid reset token\";\r\n        } else {\r\n          this.error = \"An error occurred. Please try again.\";\r\n        }\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.reset-password-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  padding: 1rem;\r\n}\r\n\r\n.reset-password-card {\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 2rem;\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\nh2 {\r\n  color: #4caf50;\r\n  margin-bottom: 0.5rem;\r\n  text-align: center;\r\n}\r\n\r\n.subtitle {\r\n  color: #6c757d;\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.reset-password-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n\r\nlabel {\r\n  font-weight: 500;\r\n  color: #6c757d;\r\n}\r\n\r\ninput {\r\n  padding: 0.75rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border-color: #4caf50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #4caf50;\r\n  color: white;\r\n  padding: 0.75rem 1.5rem;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.btn-primary:hover {\r\n  background-color: #43a047;\r\n}\r\n\r\n.btn-primary:disabled {\r\n  opacity: 0.7;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-link {\r\n  color: #4caf50;\r\n  text-decoration: none;\r\n  font-size: 0.9rem;\r\n  transition: color 0.2s;\r\n}\r\n\r\n.btn-link:hover {\r\n  color: #43a047;\r\n}\r\n\r\n.error-message {\r\n  color: #dc3545;\r\n  background-color: #f8d7da;\r\n  border: 1px solid #f5c6cb;\r\n  padding: 0.75rem;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n}\r\n\r\n.back-to-login {\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.error {\r\n  color: #dc3545;\r\n  font-size: 0.875rem;\r\n  margin-top: 0.25rem;\r\n}\r\n</style>\r\n"],"mappings":"AA0DA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE,EAAE;MACnBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,IAAI;MACXC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAAA,EAAG;MACjB;MACA,IAAI,CAACH,aAAY,GAAI,IAAI;MACzB,IAAI,CAACC,YAAW,GAAI,IAAI;;MAExB;MACA,IAAI,IAAI,CAACL,WAAW,CAACQ,MAAK,GAAI,CAAC,EAAE;QAC/B,IAAI,CAACJ,aAAY,GAAI,6CAA6C;QAClE,OAAO,KAAK;MACd;;MAEA;MACA,IAAI,IAAI,CAACJ,WAAU,KAAM,IAAI,CAACC,eAAe,EAAE;QAC7C,IAAI,CAACI,YAAW,GAAI,wBAAwB;QAC5C,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb,CAAC;IACD,MAAMI,YAAYA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAACF,gBAAgB,CAAC,CAAC,EAAE;QAC5B;MACF;MAEA,IAAI,CAACL,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,KAAI,GAAI,IAAI;MAEjB,IAAI;QACFO,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C,MAAMC,QAAO,GAAI,MAAMf,KAAK,CAACgB,IAAI,CAAC,0BAA0B,EAAE;UAC5DC,KAAK,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK;UAC9BC,YAAY,EAAE,IAAI,CAAClB;QACrB,CAAC,CAAC;QACFU,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,QAAQ,CAACb,IAAI,CAAC;QAEhD,IAAIa,QAAQ,CAACb,IAAI,CAACoB,OAAM,KAAM,+BAA+B,EAAE;UAC7D;UACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC7B;MACF,EAAE,OAAOlB,KAAK,EAAE;QACdO,OAAO,CAACP,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACS,QAAQ,EAAEb,IAAI,CAAC;QACrD,IAAII,KAAK,CAACS,QAAQ,EAAEU,MAAK,KAAM,GAAG,EAAE;UAClC,MAAMC,OAAM,GAAIpB,KAAK,CAACS,QAAQ,CAACb,IAAI,CAACyB,MAAM;UAC1C,IAAIC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;YAC1B,IAAI,CAACpB,KAAI,GAAIoB,OAAO,CAAC,CAAC,CAAC,CAACI,GAAG;UAC7B,OAAO;YACL,IAAI,CAACxB,KAAI,GAAI,yBAAyB;UACxC;QACF,OAAO,IAAIA,KAAK,CAACS,QAAQ,EAAEU,MAAK,KAAM,GAAG,EAAE;UACzC,IAAI,CAACnB,KAAI,GAAI,qBAAqB;QACpC,OAAO;UACL,IAAI,CAACA,KAAI,GAAI,sCAAsC;QACrD;MACF,UAAU;QACR,IAAI,CAACD,OAAM,GAAI,KAAK;MACtB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}